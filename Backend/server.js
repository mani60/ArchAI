const express = require("express");
const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");
const { exec } = require("child_process");
const cors = require("cors");
require("dotenv").config();
const { System_prompt,  pythonFilePath, imageFilePath, PYTHON_DIR, IMAGE_DIR, Hash} = require("./prompt");

const app = express();
const PORT = 8000;

app.use(cors());

fs.ensureDirSync(PYTHON_DIR);
fs.ensureDirSync(IMAGE_DIR);

app.use(express.json());
app.use("/generated_images", express.static(IMAGE_DIR));
app.post("/generate-architecture", async (req, res) => {
  try {
    const { userMessage } = req.body;
    if (!userMessage) {
      return res.status(400).json({ error: "User message is required" });
    }
    const systemPrompt = System_prompt;

    // Call OpenAI API
    const openaiResponse = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMessage }
        ],
        temperature: 0.55
      },
      {
        headers: {
          "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        }
      }
    );

    let pythonCode = openaiResponse.data.choices[0].message.content.trim();

    // Ensure code does not include unwanted triple quotes
    pythonCode = pythonCode.replace(/^```python\s*/, "").replace(/```$/, "").trim();

    if (!pythonCode.includes("from diagrams")) {
      throw new Error("Invalid Python code generated by LLM");
    }

    // Save Python file
    await fs.writeFile(pythonFilePath, pythonCode);

    // Execute Python file
    exec(`python3 "${pythonFilePath}"`, (error, stdout, stderr) => {
      if (error) {
        console.error("Execution error:", stderr);
        return res.status(500).json({ error: "Python script execution failed" });
      }

      // Check if image was created
      if (!fs.existsSync(imageFilePath)) {
        return res.status(500).json({ error: "Architecture image not generated" });
      }

      res.json({
        pythonFile: pythonFilePath,
        imageFile: `/generated_images/architecture_${Hash}.png`
      });
    });

  } catch (err) {
    console.error("Error:", err.message);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
